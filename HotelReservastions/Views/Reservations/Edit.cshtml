@model HotelReservastionsManager.Models.Reservation
@{
    ViewData["Title"] = "Edit Reservation";
    var clients = ViewData["Clients"] as List<HotelReservastionsManager.Models.Client>;
}

<h1>Edit Reservation</h1>
<hr />
<div class="row">
    <div class="col-md-8">
        <form asp-action="Edit" id="reservationForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ReservationId" />

            <div class="form-group mb-3">
                <label asp-for="RoomNumber" class="control-label"></label>
                <select asp-for="RoomNumber" class="form-control" asp-items="ViewBag.RoomNumber"></select>
                <span asp-validation-for="RoomNumber" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="UserId" class="control-label">Employee</label>
                <select asp-for="UserId" class="form-control" asp-items="ViewBag.UserId"></select>
                <span asp-validation-for="UserId" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="CheckInDate" class="control-label"></label>
                <input asp-for="CheckInDate" class="form-control" type="date" />
                <span asp-validation-for="CheckInDate" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="CheckOutDate" class="control-label"></label>
                <input asp-for="CheckOutDate" class="form-control" type="date" />
                <span asp-validation-for="CheckOutDate" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <h5>Meal Options</h5>
                <div class="form-check">
                    <input class="form-check-input meal-option" type="checkbox" asp-for="BreakfastIncluded" id="breakfastIncluded" />
                    <label class="form-check-label" for="breakfastIncluded">
                        @Html.DisplayNameFor(model => model.BreakfastIncluded)
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input meal-option" type="checkbox" asp-for="AllInclusive" id="allInclusive" />
                    <label class="form-check-label" for="allInclusive">
                        @Html.DisplayNameFor(model => model.AllInclusive)
                    </label>
                </div>
                <div id="mealOptionError" class="text-danger" style="display: none;">
                    Cannot select both Breakfast Included and All Inclusive options simultaneously.
                </div>
            </div>

            <!-- Modified section for FinalPrice -->
            <div class="form-group mb-3">
                <label asp-for="FinalPrice" class="control-label"></label>
                <!-- Display input (not tied to model binding) -->
                <input id="FinalPriceDisplay" class="form-control" readonly value="@Model.FinalPrice.ToString("F2")" />
                <!-- Hidden input for actual model binding -->
                <input type="hidden" name="FinalPrice" asp-for="FinalPrice" />
                <span asp-validation-for="FinalPrice" class="text-danger"></span>
                <small class="form-text text-muted">Price automatically calculated based on room, dates, clients, and meal options.</small>
            </div>

            <h4>Clients staying in the room</h4>
            <div id="clientsContainer">
                @if (clients != null && clients.Any())
                {
                    for (int i = 0; i < clients.Count; i++)
                    {
                        var client = clients[i];
                        <div class="client-row mb-3 p-3 border rounded">
                            <div class="d-flex justify-content-between">
                                <h5>Client @(i + 1)</h5>
                                @if (i > 0)
                                {
                                    <button type="button" class="btn btn-sm btn-danger remove-client">Remove</button>
                                }
                            </div>
                            <input type="hidden" name="ClientId[@i]" value="@client.ClientId" />
                            <div class="row">
                                <div class="col-md-6 mb-2">
                                    <label class="control-label">First Name</label>
                                    <input name="ClientFirstName[@i]" class="form-control" value="@client.FirstName" required />
                                </div>
                                <div class="col-md-6 mb-2">
                                    <label class="control-label">Last Name</label>
                                    <input name="ClientLastName[@i]" class="form-control" value="@client.LastName" required />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-2">
                                    <label class="control-label">Phone Number</label>
                                    <input name="ClientPhone[@i]" class="form-control" value="@client.PhoneNumber" required maxlength="10" minlength="10" />
                                </div>
                                <div class="col-md-6 mb-2">
                                    <label class="control-label">Email</label>
                                    <input name="ClientEmail[@i]" class="form-control" value="@client.Email" required type="email" />
                                </div>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input client-adult-checkbox" type="checkbox" name="ClientAdult[@i]" value="true" id="adult@i" @(client.Adult ? "checked" : "") />
                                <label class="form-check-label" for="adult@i">
                                    Adult
                                </label>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="client-row mb-3 p-3 border rounded">
                        <h5>Client 1</h5>
                        <div class="row">
                            <div class="col-md-6 mb-2">
                                <label class="control-label">First Name</label>
                                <input name="ClientFirstName[0]" class="form-control" required />
                            </div>
                            <div class="col-md-6 mb-2">
                                <label class="control-label">Last Name</label>
                                <input name="ClientLastName[0]" class="form-control" required />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-2">
                                <label class="control-label">Phone Number</label>
                                <input name="ClientPhone[0]" class="form-control" required maxlength="10" minlength="10" />
                            </div>
                            <div class="col-md-6 mb-2">
                                <label class="control-label">Email</label>
                                <input name="ClientEmail[0]" class="form-control" required type="email" />
                            </div>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input client-adult-checkbox" type="checkbox" name="ClientAdult[0]" value="true" id="adult0" checked>
                            <label class="form-check-label" for="adult0">
                                Adult
                            </label>
                        </div>
                    </div>
                }
            </div>

            <button type="button" id="addClientBtn" class="btn btn-secondary mb-3">Add Another Client</button>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const roomNumberSelect = document.getElementById('RoomNumber');
            const checkInDateInput = document.getElementById('CheckInDate');
            const checkOutDateInput = document.getElementById('CheckOutDate');
            const breakfastCheckbox = document.getElementById('breakfastIncluded');
            const allInclusiveCheckbox = document.getElementById('allInclusive');
            const finalPriceDisplay = document.getElementById('FinalPriceDisplay');
            const finalPriceInput = document.querySelector('input[name="FinalPrice"]');
            const clientsContainer = document.getElementById('clientsContainer');
            const addClientBtn = document.getElementById('addClientBtn');

            const BREAKFAST_PRICE_PER_NIGHT = 30;
            const ALL_INCLUSIVE_PRICE_PER_NIGHT = 50;

            let roomPriceData = {};

            let clientRows = document.querySelectorAll('.client-row');
            let clientCount = clientRows.length;
            let adultCount = 0;
            let childCount = 0;

            updateClientCounts();
            fetchRoomPriceData();

            roomNumberSelect.addEventListener('change', calculatePrice);
            checkInDateInput.addEventListener('change', calculatePrice);
            checkOutDateInput.addEventListener('change', calculatePrice);
            breakfastCheckbox.addEventListener('change', calculatePrice);
            allInclusiveCheckbox.addEventListener('change', calculatePrice);

            document.querySelectorAll('.client-adult-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    updateClientCounts();
                    calculatePrice();
                });
            });

            addClientBtn.addEventListener('click', function() {
                clientCount++;
                const newIndex = clientCount - 1;

                const clientRow = document.createElement('div');
                clientRow.className = 'client-row mb-3 p-3 border rounded';
                clientRow.innerHTML = `
                    <div class="d-flex justify-content-between">
                        <h5>Client ${clientCount}</h5>
                        <button type="button" class="btn btn-sm btn-danger remove-client">Remove</button>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-2">
                            <label class="control-label">First Name</label>
                            <input name="ClientFirstName[${newIndex}]" class="form-control" required />
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="control-label">Last Name</label>
                            <input name="ClientLastName[${newIndex}]" class="form-control" required />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-2">
                            <label class="control-label">Phone Number</label>
                            <input name="ClientPhone[${newIndex}]" class="form-control" required maxlength="10" minlength="10" />
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="control-label">Email</label>
                            <input name="ClientEmail[${newIndex}]" class="form-control" required type="email" />
                        </div>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input client-adult-checkbox" type="checkbox" name="ClientAdult[${newIndex}]" value="true" id="adult${newIndex}" checked>
                        <label class="form-check-label" for="adult${newIndex}">
                            Adult
                        </label>
                    </div>
                `;

                clientsContainer.appendChild(clientRow);

                const removeBtn = clientRow.querySelector('.remove-client');
                removeBtn.addEventListener('click', function() {
                    clientRow.remove();
                    updateClientCounts();
                    calculatePrice();
                });

                const adultCheckbox = clientRow.querySelector('.client-adult-checkbox');
                adultCheckbox.addEventListener('change', function() {
                    updateClientCounts();
                    calculatePrice();
                });

                updateClientCounts();
                calculatePrice();
            });

            clientsContainer.addEventListener('click', function(event) {
                if (event.target.classList.contains('remove-client')) {
                    const clientRow = event.target.closest('.client-row');
                    clientRow.remove();
                    updateClientCounts();
                    calculatePrice();
                }
            });

            validateMealOptions();
            breakfastCheckbox.addEventListener('change', validateMealOptions);
            allInclusiveCheckbox.addEventListener('change', validateMealOptions);

            const form = document.getElementById('reservationForm');
            form.addEventListener('submit', function(event) {
                if (breakfastCheckbox.checked && allInclusiveCheckbox.checked) {
                    event.preventDefault();
                    mealOptionError.style.display = 'block';
                    window.scrollTo({
                        top: mealOptionError.offsetTop - 100,
                        behavior: 'smooth'
                    });
                }
            });

            function validateMealOptions() {
                const mealOptionError = document.getElementById('mealOptionError');
                if (breakfastCheckbox.checked && allInclusiveCheckbox.checked) {
                    mealOptionError.style.display = 'block';
                } else {
                    mealOptionError.style.display = 'none';
                }

                calculatePrice();
            }

            function updateClientCounts() {
                const allClientAdultCheckboxes = document.querySelectorAll('.client-adult-checkbox, input[id^="adult"]');
                adultCount = 0;
                childCount = 0;

                allClientAdultCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        adultCount++;
                    } else {
                        childCount++;
                    }
                });
            }

            function fetchRoomPriceData() {
                fetch('/Reservations/GetRoomPrices')
                    .then(response => response.json())
                    .then(data => {
                        roomPriceData = data;
                        calculatePrice();
                    })
                    .catch(error => {
                        console.error('Error fetching room prices:', error);
                    });
            }

            function calculatePrice() {
                const roomNumber = roomNumberSelect.value;
                if (!roomNumber || !roomPriceData[roomNumber]) {
                    finalPriceDisplay.value = '0.00';
                    finalPriceInput.value = '0';
                    return;
                }

                const roomData = roomPriceData[roomNumber];
                const adultPrice = roomData.adultPrice;
                const childPrice = roomData.childPrice;

                const checkInDate = new Date(checkInDateInput.value);
                const checkOutDate = new Date(checkOutDateInput.value);

                if (isNaN(checkInDate) || isNaN(checkOutDate) || checkOutDate <= checkInDate) {
                    finalPriceDisplay.value = '0.00';
                    finalPriceInput.value = '0';
                    return;
                }

                const timeDiff = checkOutDate.getTime() - checkInDate.getTime();
                const nights = Math.ceil(timeDiff / (1000 * 3600 * 24));

                let basePrice = (adultCount * adultPrice + childCount * childPrice) * nights;

                let mealPrice = 0;
                if (breakfastCheckbox.checked) {
                    mealPrice = BREAKFAST_PRICE_PER_NIGHT * (adultCount + childCount) * nights;
                } else if (allInclusiveCheckbox.checked) {
                    mealPrice = ALL_INCLUSIVE_PRICE_PER_NIGHT * (adultCount + childCount) * nights;
                }

                const finalPrice = basePrice + mealPrice;

                finalPriceDisplay.value = finalPrice.toFixed(2);

                finalPriceInput.value = Math.round(finalPrice);
            }
        });
    </script>
}